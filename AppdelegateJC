//
//  AppDelegate.swift
//  JcProviderApp
//
//  Created by Anupriya on 16/11/18.
//  Copyright ¬© 2018 com.smartitventures. All rights reserved.
//  Cleaner App //Shubham //New side menu

import UIKit
import Firebase
import UserNotifications
import FirebaseMessaging
import IQKeyboardManager
// 2c2651 <- TextField Text n Boarder Color
var languageCode = "en"
@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var langCode : String?
    var window: UIWindow?
    var applicationStateString: String {
        if UIApplication.shared.applicationState == .active {
            return "active"
        } else if UIApplication.shared.applicationState == .background {
            return "background"
        }else {
            return "inactive"
        }
    }

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after appliation launch. 
        IQKeyboardManager.shared().isEnabled = true
        FirebaseApp.configure()
        application.registerForRemoteNotifications()
        requestNotificationAuthorization(application: application)
        //        ruserok.set((UIDevice.current.identifierForVendor?.uuidString)!, forKey: "udId")
       
       
        NotificationCenter.default.addObserver(self, selector:
            #selector(tokenRefreshNotification), name:
            NSNotification.Name.InstanceIDTokenRefresh, object: nil)
        langCode = users.object(forKey: EnumUserDefaultKey.langCode.userKey) as? String
        Bundle.setLanguage((langCode != nil) ? langCode!  : "en")
        
        
         // When the app launch after user tap on notification (originally was not running / not in background)
        if(launchOptions?[UIApplication.LaunchOptionsKey.remoteNotification] != nil){
            print("user Tapped on notification")
        }
        
        
        return true
    }

    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
    }

    func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }

    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
    }

    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
    }

    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }

    @objc func tokenRefreshNotification(_ notification: Notification) {
        if let refreshedToken = InstanceID.instanceID().token() {
            print("InstanceID token: \(refreshedToken)")
        }
        
        // Connect to FCM since connection may have failed when attempted before having a token.
        ConnectToFCM()
    }
    
    func ConnectToFCM() {
        Messaging.messaging().shouldEstablishDirectChannel = true
        
        if let token = InstanceID.instanceID().token() {
            user.set(token, forKey: "deviceToken")
            print("TOKEN DCS: " + token)
        }
        
    }
    
    // PushNotification Permission
    func requestNotificationAuthorization(application: UIApplication) {
        if #available(iOS 10.0, *) {
            UNUserNotificationCenter.current().delegate = self
            let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
            UNUserNotificationCenter.current().requestAuthorization(options: authOptions, completionHandler: {_, _ in
                // print("options!!!=")
                
            })
        } else {
            let settings: UIUserNotificationSettings = UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)
            application.registerUserNotificationSettings(settings)
        }
    }
    
    // Push Notification Delegate
    func application(_ application: UIApplication,
                     didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        
        InstanceID.instanceID().instanceID(handler: { (result, error) in
            if let error = error {
                print("Error fetching remote instange ID: \(error)")
            } else if let result = result {
                //  user.set(result.token, forKey: "deviceToken")
                print("üìçRemote instance ID token: \(result.token)")
                user.set(result.token, forKey: "deviceToken")
            }
        })
        
    }
    
    func application(_ application: UIApplication,
                     didFailToRegisterForRemoteNotificationsWithError error: Error) {
        print("Failed to register: \(error.localizedDescription)")
    }

}

extension AppDelegate : UNUserNotificationCenterDelegate {
    // iOS10+, called when presenting notification in foreground
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        let userInfo = notification.request.content.userInfo
        let appointmentDict = convertToJSON(resulTDict: userInfo)
        print("appointmentDictttt=",appointmentDict)
        
        // NSLog("[UserNotificationCenter] applicationState: \(applicationStateString) willPresentNotification: \(userInfo)")
        print("userinfoPPP=",userInfo)
        // TODO: Handle foreground notification
     //   handleNotification(userInfo: userInfo)
 
        
        //TODO: Handle foreground notification
        completionHandler([.alert])
    }
    
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any],
                     fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        
        Messaging.messaging().appDidReceiveMessage(userInfo)
        print(userInfo)
       // handleNotification(userInfo :  userInfo)
        completionHandler(UIBackgroundFetchResult.newData)
    }
    
    // iOS10+, called when received response (default open, dismiss or custom action) for a notification
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        let application = UIApplication.shared
        let userInfo = response.notification.request.content.userInfo
        NSLog("[UserNotificationCenter] applicationState: \(applicationStateString) didReceiveResponse: \(userInfo)")
        let appointmentDict = convertToJSON(resulTDict: userInfo)
        print("appointmentDictttt=",appointmentDict)
        let notificationType = appointmentDict["notificationType"] as! String
        if(application.applicationState == .active){
            print("user tapped the notification bar when the app is in foreground ‚úãüèª")
            if notificationType == "NewAppointment"{
                let storyboard = UIStoryboard.init(name: "Main", bundle: nil)
                let mainViewController = storyboard.instantiateViewController(withIdentifier: "InstantAppointmentViewController") as! InstantAppointmentViewController
                mainViewController.appointmentNotiDict = appointmentDict
                // self.window?.rootViewController  = mainViewController
                if let window = self.window, let rootViewController = window.rootViewController {
                    var currentController = rootViewController
                    while let presentedController = currentController.presentedViewController {
                        currentController = presentedController
                    }
                    //self.navigationController?.pushViewController(vc, animated: true)
                    currentController.present(mainViewController, animated: true, completion: nil)
                }
            } 
            if notificationType == "cancelledbycustomer"{
                //CancelledAppointmentsViewController
                let storyboard = UIStoryboard.init(name: "Main", bundle: nil)
                let mainViewController = storyboard.instantiateViewController(withIdentifier: "CancelledAppointmentsViewController") as! CancelledAppointmentsViewController
             //   mainViewController.appointmentNotiDict = appointmentDict
                // self.window?.rootViewController  = mainViewController
                if let window = self.window, let rootViewController = window.rootViewController?.navigationController {
                    var currentController = rootViewController
//                    while let presentedController = currentController.presentedViewController {
//                        currentController = presentedController as! UINavigationController
//                    }
                    //self.navigationController?.pushViewController(vc, animated: true)
                    currentController.pushViewController(mainViewController, animated: true)
                }
            }
        }
        
        if(application.applicationState == .inactive){
            print("user tapped the notification bar when the app is in background---inactive üôåüèª")
            if notificationType == "NewAppointment"{
                let storyboard = UIStoryboard.init(name: "Main", bundle: nil)
                let mainViewController = storyboard.instantiateViewController(withIdentifier: "InstantAppointmentViewController") as! InstantAppointmentViewController
                mainViewController.appointmentNotiDict = appointmentDict
                // self.window?.rootViewController  = mainViewController
                if let window = self.window, let rootViewController = window.rootViewController {
                    var currentController = rootViewController
                    while let presentedController = currentController.presentedViewController {
                        currentController = presentedController
                    }
                    //self.navigationController?.pushViewController(vc, animated: true)
                    currentController.present(mainViewController, animated: true, completion: nil)
                }
            }
            if notificationType == "cancelledbycustomer"{
                let storyboard = UIStoryboard.init(name: "Main", bundle: nil)
                let mainViewController = storyboard.instantiateViewController(withIdentifier: "CancelledAppointmentRootViewController") as! CancelledAppointmentRootViewController
                // self.window?.rootViewController  = mainViewController
                if let window = self.window, let rootViewController = window.rootViewController {
                    var currentController = rootViewController
                    while let presentedController = currentController.presentedViewController {
                        currentController = presentedController
                    }
                    //self.navigationController?.pushViewController(vc, animated: true)
                    currentController.present(mainViewController, animated: true, completion: nil)
                }
            }
        }
        
        if(application.applicationState == .background){
            print("user tapped the notification bar when the app is in background---background ü§ù")
            if notificationType == "NewAppointment"{
                let storyboard = UIStoryboard.init(name: "Main", bundle: nil)
                let mainViewController = storyboard.instantiateViewController(withIdentifier: "InstantAppointmentViewController") as! InstantAppointmentViewController
                mainViewController.appointmentNotiDict = appointmentDict
                // self.window?.rootViewController  = mainViewController
                if let window = self.window, let rootViewController = window.rootViewController {
                    var currentController = rootViewController
                    while let presentedController = currentController.presentedViewController {
                        currentController = presentedController
                    }
                    //self.navigationController?.pushViewController(vc, animated: true)
                    currentController.present(mainViewController, animated: true, completion: nil)
                }
            }
            if notificationType == "cancelledbycustomer"{
                //CancelledAppointmentsViewController
                let storyboard = UIStoryboard.init(name: "Main", bundle: nil)
                let mainViewController = storyboard.instantiateViewController(withIdentifier: "CancelledAppointmentsViewController") as! CancelledAppointmentsViewController
                //   mainViewController.appointmentNotiDict = appointmentDict
                // self.window?.rootViewController  = mainViewController
                if let window = self.window, let rootViewController = window.rootViewController?.navigationController {
                    var currentController = rootViewController
                    //                    while let presentedController = currentController.presentedViewController {
                    //                        currentController = presentedController as! UINavigationController
                    //                    }
                    //self.navigationController?.pushViewController(vc, animated: true)
                    currentController.pushViewController(mainViewController, animated: true)
                }
            }
        }
        //TODO: Handle background notification
        //handleNotification(userInfo :  userInfo)
        // CommonMethods.playSounds(audioName: "cyanping"
        completionHandler()
    }
    func convertToDictionary(text: String) -> [String: Any]? {
        if let data = text.data(using: .utf8) {
            do {
                return try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]
            } catch {
                print(error.localizedDescription)
            }
        }
        return nil
    }
    func convertToJSON(resulTDict:[AnyHashable: Any]) -> NSDictionary {
    
    let theJSONData = try? JSONSerialization.data(withJSONObject: resulTDict ,options: JSONSerialization.WritingOptions(rawValue: 0))
    let jsonString = NSString(data: theJSONData!,encoding: String.Encoding.utf8.rawValue)
    let returnDict = self.convertToDictionary(text:jsonString! as String)
    let userData = returnDict as NSDictionary? as? [AnyHashable: Any] ?? [:]
    return userData as NSDictionary
   
    }    
}

extension AppDelegate : MessagingDelegate {
    private func messaging(_ messaging: Messaging, didRefreshRegistrationToken fcmToken: String) {
        NSLog("[RemoteNotification] didRefreshRegistrationToken: \(fcmToken)")
        //   user.set(fcmToken, forKey: "deviceToken")
        print("fcmToken2=",fcmToken)
    }
    
    // iOS9, called when presenting notification in foreground
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any]) {
        print("userInfo!2=",userInfo)
        
        NSLog("[RemoteNotification] applicationState: \(applicationStateString) didReceiveRemoteNotification for iOS9: \(userInfo)")
        if UIApplication.shared.applicationState == .active {
            //handleNotification(userInfo: userInfo)
        } else {
            //  handleNotification(userInfo: userInfo)
        }
    }
    
}
